continue
@current_user.wishes each do |wish| tag=Tags.find_by(text: wish) if tag trashes.push(tag.Trash) else puts "No trash matching that wish" end end
@current_user.wishes each do |wish|
trashes
trashes = []
@current_user.wishes
continue
@current_user.wishes
@current_user
continue
@currentUser
continue
@currentUser
continue
@currentUser
@currentUser.wishes
quit
@currentUser.wishes
continue
@currentUser.wishes
@current_user
params
quit
continue
message_nots = unread_messages.map(&:message_notficiation)
message_nots = unread_messages.map(&:message_notification)
message_nots = unread_messages.map!(&:message_notification)
unread_messages.map!(&:message_notification)
unread_messages.map!(&.message_notification)
unread_messages.map!($.message_notification)
unread_messages.map!($:message_notification)
unread_messages
continue
unread_messages
quit
continue
unread_messages
continue
data
continue
data
quit
user
continue
user
continue
user
continue
params
user
continue
quit
@current_user
continue
@current_user
continue
@current_user
continue
@current_user
continue
message.receiver
received_user
continue
message
continue
Message.where(receiver_id: @current_user.id, sender_id: params[:receiver_id], read: false)
Message.where(receiver_id: @current_user.id, sender_id: params[:other_guy], read: false)
@current_user
params
continue
unread_messages.select(:sender_id).distinct.to_json
unread_messages.select(:sender_id).distinct
unread_messages.select(:sender_id)
unread_messages
unread_messagse
continue
@current_user
continue
@current_user
continue
@current_user
continue
params[:tags]
params
continue
message
continue
message.sender.username
message.sender.usernam
message
message.receiver
message.sender
Message.sender
message
quit
continue
params
continue
params
params[:chat_id]
continue
Trash.all
