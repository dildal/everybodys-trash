continue
self
this
JSON.parse params[:tags]
JSON.se
JSON.
JSON
JSON.serializer(params[:tags])
JSON.serializer(tags)
params[:tags].split(',')
params[:tags].to_str
params[:tags].to_arr
params[:tags].to_r
params[:tags].to_arr
params[:tags].to_string
params[:tags].to_json
params[:tags][0]
params[:tags]
params
continue
params
continue
tags.split(',')[0]
tags
self
self.tags
tags[0]
tags
continue
message
quit
params
continue
unreads_after_patch
unreads
continue
data["tags"]
data["id"]
data["id]
data
data[id]
data[id[
data.category
params
data[:id]
data.id
data
data[tags]
data[tags
data[:tags]
data.tags
data
continue
data
continue
params
continue
data
continue
params[:tags]
continue
params[:tags]
parmas[:tags]
continue
params[:user]
continue
params[:user]
continue
params[:user]
quit
continue
User.current_user
@current_user
current_user
continue
message
recevied_user
received_user
received_users
quit
continue
conintue
continue
params[:id]
quit
params[:tags].split(',').each { |tag| puts tag }
params[:tags].split('').each { |tag| puts tag }
params[:tags].split.each { |tag| puts tag }
continue
params[:tags].split
params[:tags]
params[:tags].split()
params[:tags].split(',')
params[:tags]
continue
params
continue
params
continue
params
continue
params
continue
params[:picture]
params.picture
params
continue
@current_user.wishes each do |wish| tag=Tags.find_by(text: wish) if tag trashes.push(tag.Trash) else puts "No trash matching that wish" end end
@current_user.wishes each do |wish|
trashes
trashes = []
@current_user.wishes
continue
@current_user.wishes
@current_user
continue
@currentUser
continue
@currentUser
continue
@currentUser
@currentUser.wishes
quit
@currentUser.wishes
continue
@currentUser.wishes
@current_user
params
quit
continue
message_nots = unread_messages.map(&:message_notficiation)
message_nots = unread_messages.map(&:message_notification)
message_nots = unread_messages.map!(&:message_notification)
unread_messages.map!(&:message_notification)
unread_messages.map!(&.message_notification)
unread_messages.map!($.message_notification)
unread_messages.map!($:message_notification)
unread_messages
continue
unread_messages
quit
continue
unread_messages
continue
data
continue
data
quit
user
continue
user
continue
user
continue
params
user
continue
quit
@current_user
continue
@current_user
continue
@current_user
continue
@current_user
continue
message.receiver
received_user
continue
message
continue
Message.where(receiver_id: @current_user.id, sender_id: params[:receiver_id], read: false)
Message.where(receiver_id: @current_user.id, sender_id: params[:other_guy], read: false)
@current_user
params
continue
unread_messages.select(:sender_id).distinct.to_json
unread_messages.select(:sender_id).distinct
unread_messages.select(:sender_id)
unread_messages
unread_messagse
continue
@current_user
continue
@current_user
continue
@current_user
continue
params[:tags]
params
continue
message
continue
message.sender.username
message.sender.usernam
message
message.receiver
message.sender
Message.sender
message
quit
continue
params
continue
params
params[:chat_id]
continue
Trash.all
